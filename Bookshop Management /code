index.js – This file will contain all the methods to handle the book-related tasks and user tasks.

package.json – Dependency management (with Axios).

README.md – A short description of the project.

const axios = require('axios');

// Base URL for the API
const API_URL = 'https://api.example.com/books';

// General Users: Task 1 - Get all books
async function getAllBooks() {
    try {
        const response = await axios.get(`${API_URL}`);
        console.log("Books available in the shop:", response.data);
    } catch (error) {
        console.error("Error fetching books:", error);
    }
}

// Task 2: Get books by ISBN
function searchByISBN(isbn) {
    return axios.get(`${API_URL}/isbn/${isbn}`)
        .then(response => {
            console.log("Book found by ISBN:", response.data);
        })
        .catch(error => {
            console.error("Error fetching book by ISBN:", error);
        });
}

// Task 3: Get all books by Author
async function searchByAuthor(author) {
    try {
        const response = await axios.get(`${API_URL}/author/${author}`);
        console.log("Books by Author:", response.data);
    } catch (error) {
        console.error("Error fetching books by author:", error);
    }
}

// Task 4: Get all books based on Title
async function searchByTitle(title) {
    try {
        const response = await axios.get(`${API_URL}/title/${title}`);
        console.log("Books with Title:", response.data);
    } catch (error) {
        console.error("Error fetching books by title:", error);
    }
}

// Task 5: Get book reviews
async function getBookReview(isbn) {
    try {
        const response = await axios.get(`${API_URL}/reviews/${isbn}`);
        console.log("Reviews for the book:", response.data);
    } catch (error) {
        console.error("Error fetching book reviews:", error);
    }
}

// Task 6: Register new user
async function registerNewUser(userData) {
    try {
        const response = await axios.post(`${API_URL}/register`, userData);
        console.log("User registered:", response.data);
    } catch (error) {
        console.error("Error registering user:", error);
    }
}

// Task 7: Login as Registered user
async function loginUser(credentials) {
    try {
        const response = await axios.post(`${API_URL}/login`, credentials);
        console.log("User logged in:", response.data);
    } catch (error) {
        console.error("Error logging in user:", error);
    }
}

// Registered Users: Task 8 - Add/Modify book review
async function addModifyBookReview(isbn, reviewData) {
    try {
        const response = await axios.post(`${API_URL}/reviews/${isbn}`, reviewData);
        console.log("Review added/modified:", response.data);
    } catch (error) {
        console.error("Error adding/modifying review:", error);
    }
}

// Task 9: Delete book review
async function deleteBookReview(isbn, reviewId) {
    try {
        const response = await axios.delete(`${API_URL}/reviews/${isbn}/${reviewId}`);
        console.log("Review deleted:", response.data);
    } catch (error) {
        console.error("Error deleting review:", error);
    }
}

// Task 10: Get all books using async callback
async function getAllBooksAsyncCallback() {
    try {
        const response = await axios.get(`${API_URL}`);
        console.log("Books available in the shop:", response.data);
    } catch (error) {
        console.error("Error fetching books:", error);
    }
}

// Task 11: Search by ISBN using Promises
function searchByISBNWithPromises(isbn) {
    return axios.get(`${API_URL}/isbn/${isbn}`)
        .then(response => {
            console.log("Book found by ISBN:", response.data);
        })
        .catch(error => {
            console.error("Error fetching book by ISBN:", error);
        });
}

// Task 12: Search by Author using async/await
async function searchByAuthorAsync(author) {
    try {
        const response = await axios.get(`${API_URL}/author/${author}`);
        console.log("Books by Author:", response.data);
    } catch (error) {
        console.error("Error fetching books by author:", error);
    }
}

// Task 13: Search by Title using async/await
async function searchByTitleAsync(title) {
    try {
        const response = await axios.get(`${API_URL}/title/${title}`);
        console.log("Books with Title:", response.data);
    } catch (error) {
        console.error("Error fetching books by title:", error);
    }
}

// Task 14: Submission of Project GitHub Link
const GITHUB_LINK = "https://github.com/your-username/your-repository";
console.log("Project GitHub Link: ", GITHUB_LINK);

// Example usage
getAllBooks();  // Get all books
searchByISBN('1234567890'); // Search by ISBN
searchByAuthor('J.K. Rowling'); // Search by Author
searchByTitle('Harry Potter'); // Search by Title
getBookReview('1234567890'); // Get book review
registerNewUser({ username: "john_doe", password: "password123" }); // Register a new user
loginUser({ username: "john_doe", password: "password123" }); // Login as a user
addModifyBookReview('1234567890', { review: "Great book!", rating: 5 }); // Add/Modify review
deleteBookReview('1234567890', 1); // Delete review

